{
    "Initialize cpp": {
        "prefix": "!!!",
        "body": ["#include <${1:bits/stdc++.h}>", "", "using namespace std;", "", "int main() {", "    $0", "    return 0;", "}"]
    },

    "Initialize cpp with array": {
        "prefix": "!!",
        "body": ["#include <${1:bits/stdc++.h}>", "", "using namespace std;", "", "int T[${2:/* length */}];", "", "int main() {", "    $0", "    return 0;", "}"]
    },

    "Declare function main": {
        "prefix": "!main",
        "body": ["int main () {", "    $0", "    return 0;", "}"]
    },

    "file header": {
        "prefix": "!fileheader",
        "body": [
            "/**",
            "**********************************************************************************************************************************************************************************************************************************",
            "* @file:\t$TM_FILENAME",
            "* @author:\t$1",
            "* @date:\t$CURRENT_YEAR.$CURRENT_MONTH.$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND $CURRENT_DAY_NAME",
            "* @brief:\t$2",
            "**********************************************************************************************************************************************************************************************************************************",
            "**/"
        ],
        "description": "Initialize file header"
    },

    "include": {
        "prefix": "#inc",
        "body": ["#include <${1:bits/stdc++.h}>$0"],
        "description": "snippet for #include"
    },

    "namespace": {
        "prefix": "!using",
        "body": ["using namespace ${1:std};$0"],
        "description": "Add namespace"
    },

    "long long": {
        "prefix": "!LL",
        "body": ["using LL = long long;"],
        "description": "Create long long alias"
    },

    "tab": {
        "prefix": "!tab",
        "body": ["${1:int} A[${2:1000000}];"],
        "description": "Create array"
    },

    "array": {
        "prefix": "!arr",
        "body": ["array<${1:int}, ${2:2}>"],
        "description": "Create an array"
    },

    "vector": {
        "prefix": "!vec",
        "body": ["vector<${1:int}> ${2:vec};"],
        "description": "Create vector"
    },

    "set": {
        "prefix": "!set",
        "body": ["set<${1:int}> S;"],
        "description": "Create set"
    },

    "unordered set": {
        "prefix": "!uset",
        "body": ["unordered_set<${1:int}> S;"],
        "description": "Creates unordered set"
    },

    "multiset": {
        "prefix": "!mset",
        "body": ["multiset<${1:int}> S;"],
        "description": "Creates multiset"
    },

    "unordered multiset": {
        "prefix": "!umset",
        "body": ["unordered_multiset<${1:int}> S;"],
        "description": "Creates unordered multiset"
    },

    "map": {
        "prefix": "!map",
        "body": ["map<${1:int}, ${2:int}> M;"],
        "description": "Create map"
    },

    "unordered map": {
        "prefix": "!umap",
        "body": ["unordered_map<${1:int}, ${2:int}> M;"],
        "description": "Create unordered map"
    },

    "stack": {
        "prefix": "!stack",
        "body": ["stack<${1:int}> Q;"],
        "description": "Create a stack"
    },

    "queue": {
        "prefix": "!queue",
        "body": ["queue<${1:int}> Q;"],
        "description": "Create queue"
    },

    "dequeue": {
        "prefix": "!dequeue",
        "body": ["dequeue<${1:int}> Q;"],
        "description": "Create dequeue"
    },

    "priority queue": {
        "prefix": "!pqueue",
        "body": ["priority_queue<${1:int}> Q;"],
        "description": "Create priority queue"
    },

    "pair": {
        "prefix": "!pair",
        "body": ["pair<${1:int}, ${2:int}>"],
        "description": "Create a pair"
    },

    "tuple": {
        "prefix": "!tuple",
        "body": ["tuple<${1:int}, ${2:int}, ${3:int}>"],
        "description": "Create a tuple"
    },

    "get_tuple": {
        "prefix": "!get_tuple",
        "body": ["get<${1:index}>(${2:var})"],
        "description": "Create a tuple"
    },

    "greater": {
        "prefix": "!greater",
        "body": ["greater<${1:int}>"],
        "description": "Create a greater comparator"
    },

    "Normal for loop": {
        "prefix": "!for",
        "body": ["for (int ${1:i} = ${2:0}; ${1:i} < ${3:n}; ${1:i}++) {", "    $4", "}$0"],
        "description": "Simple for loop"
    },

    "Reverse for loop": {
        "prefix": "!forr",
        "body": ["for (int i = ${1:n - 1}; i >= 0; i--) {", "    $2", "}$0"],
        "description": "Reverse for loop"
    },

    "Colon for loop": {
        "prefix": "!fora",
        "body": ["for (auto i : ${1:vec}) {", "    $2", "}$0"],
        "description": "Colon for loop"
    },

    "endline": {
        "prefix": "!n",
        "body": "<< '\\n';",
        "description": "Adds endline to cout"
    },

    "Make ur code faster": {
        "prefix": "!fast",
        "body": ["ios_base::sync_with_stdio(false);", "cin.tie(0);", "cout.tie(0);"]
    },

    "swap": {
        "prefix": "!swap",
        "body": ["swap(${1:a}, ${2:b});"],
        "description": "Swap two variables"
    },

    "next permutation": {
        "prefix": "!nperm",
        "body": ["next_permutation(${1:vec}.begin(), ${1:vec}.end())"],
        "description": "Get the next permutation"
    },

    "srand": {
        "prefix": "!rand",
        "body": ["srand(${1:seed})"],
        "description": "Generate random number from seed"
    },

    "lower_bound": {
        "prefix": "!lower_bound",
        "body": ["lower_bound(${1}.begin(), ${1}.end(), ${2:number})"],
        "description": "Returns an iterator pointing to the first element in the range first,last which does not compare less than val."
    },

    "upper_bound": {
        "prefix": "!upper_bound",
        "body": ["upper_bound(${1}.begin(), ${1}.end(), ${2:number})"],
        "description": "Returns an iterator pointing to the first element in the range first,last which compares greater than val."
    },

    "assert": {
        "prefix": "!assert",
        "body": ["assert((${1:/* Condition to validate */}))"],
        "description": "Checks if condition is true"
    },

    "cerr": {
        "prefix": "!cerr",
        "body": ["cerr >> $0;"],
        "description": "Helpful for printing debug information"
    },

    "gcd": {
        "prefix": ["!gcd", "!nwd"],
        "body": ["${1:int} GCD(${1:int} a, ${1:int} b) {", "  if (b == 0) return a;", "  return GCD(b, a % b);", "}"],
        "description": "Greatest common divisor function"
    },

    "gcf": {
        "prefix": ["!gcf", "!nww"],
        "body": ["int GCF(int a, int b) { return a / GCD(a, b) * b; }"],
        "description": "Greatest common factor function"
    },

    "newton": {
        "prefix": "!newton",
        "body": [
            "template <typename FactorialType, int size>",
            "class Newton {",
            "    FactorialType F[size];",
            "    FactorialType modulo;",
            "",
            "    FactorialType fast_mod_power(FactorialType a, FactorialType exponent) {",
            "        if (!exponent) return 1;",
            "        if (exponent & 1) return (a * fast_mod_power(a, exponent - 1)) % modulo;",
            "        return fast_mod_power((a * a) % modulo, exponent / 2) % modulo;",
            "    }",
            "",
            "   public:",
            "    Newton(int modulo_value) {",
            "        modulo = modulo_value;",
            "        F[0] = 1;",
            "        for (FactorialType i = 1; i < size; ++i) {",
            "            F[i] = (F[i - 1] * i) % modulo;",
            "        }",
            "    }",
            "    FactorialType get_reverse_factor(FactorialType x) { return fast_mod_power(F[x], modulo - 2); }",
            "    FactorialType get_factor(FactorialType x) { return F[x]; }",
            "    FactorialType n_choose_k(FactorialType n, FactorialType k) { return ((((F[n] * get_reverse_factor(k)) % modulo)) * get_reverse_factor(n - k)) % modulo; }",
            "};"
        ],
        "description": "Calculate newton symbol and get factors"
    },

    "two pow ceil": {
        "prefix": "!two_ceil",
        "body": [
            "unsigned int two_ceil(unsigned int a) {",
            "    a--;",
            "    a |= a >> 1;",
            "    a |= a >> 2;",
            "    a |= a >> 4;",
            "    a |= a >> 8;",
            "    a |= a >> 16;",
            "    a++;",
            "    return a;",
            "}"
        ],
        "description": "Get the next closest power of 2 to the given number"
    },

    "fastPow": {
        "prefix": "!pow",
        "body": [
            "template <class T>",
            "long long pow(T a, T exponent) {",
            "    if (!exponent) return 1;",
            "    long long tmp = pow(a, exponent / 2);",
            "    if (exponent & 1) return tmp * tmp * a;",
            "    return tmp * tmp;",
            "}"
        ],
        "description": "Quickly calculate a^b"
    },

    "fastPowMod": {
        "prefix": "!fastPowMod",
        "body": [
            "template <class T>",
            "long long powMod(T a, T exponent, T m) {",
            "    if (!exponent) return 1;",
            "    long long tmp = powMod(a, exponent / 2, m);",
            "    if (exponent & 1) return (((tmp * tmp) % m) * a) % m;",
            "    return (tmp * tmp) % m;",
            "}"
        ],
        "description": "Quickly calculate a^b mod c"
    },

    "find": {
        "prefix": "!find",
        "body": ["int Find(int a) {", "if (${1:array}[a] != a) ${1:array}[a] = Find(${1:array}[a]);", "return ${1:array}[a];", "}"],
        "description": "Find function"
    },

    "union find": {
        "prefix": "!unionfind",
        "body": [
            "template <size_t size>",
            "struct UnionFind {",
            "  struct Change {",
            "    int element, previous_value;",
            "    Change(int element, int previous_value)",
            "      : element(element), previous_value(previous_value) {}",
            "  };",
            "",
            "  array<int, size + 1> nodes;",
            "  stack<Change> changes;",
            "",
            "  UnionFind() {",
            "    for (int i = 1; i <= size; ++i) {",
            "      nodes[i] = i;",
            "    }",
            "  }",
            "",
            "  int find(int x) {",
            "    if (nodes[x] != x) return find(nodes[x]);",
            "    return nodes[x];",
            "  }",
            "",
            "  void merge(int x, int y) {",
            "    if (y < x) swap(x, y);",
            "    changes.push(Change(y, nodes[y]));",
            "    nodes[y] = x;",
            "  }",
            "",
            "  void revert() {",
            "    Change last_change = changes.top();",
            "    changes.pop();",
            "    nodes[last_change.element] = last_change.previous_value;",
            "  }",
            "",
            "  bool is_connected(int x, int y) { return find(x) == find(y); }",
            "};"
        ],
        "description": "Union-Find struct with option to delete last added element"
    },

    "binary search": {
        "prefix": "!binsrc",
        "body": [
            "int binSrc(int a, int b) {",
            "  while (a + 1 != b) {",
            "    int c = (a + b) / 2;",
            "    if (${1:/* Your condition goes here */}) {",
            "        a = c;",
            "    } else {",
            "        b = c;",
            "    }",
            "  }",
            "  return a;",
            "}"
        ],
        "description": "Binary search function"
    },

    "breadth-first search": {
        "prefix": "!bfs",
        "body": [
            "void BFS(int s) {",
            "  queue<int> Q;",
            "  vector<int> visited;",
            "  Q.push(s);",
            "  visited[s] = true;",
            "  while (!Q.empty()) {",
            "    int x = Q.front();",
            "    Q.pop();",
            "    for (auto i : vec[x]) {",
            "      if (!visited[i]) {",
            "        Q.push(i);",
            "        visited[i] = true;",
            "      }",
            "    }",
            "  }",
            "}"
        ],
        "description": "Breadth-first search algorithm"
    },

    "depth-first search": {
        "prefix": "!dfs",
        "body": ["void DFS(int x) {", "  if (visited[x]) return;", "  visited[x] = true;", "  for (auto i : graph[x]) {", "    DFS(i);", "  }", "}"],
        "description": "Depth-first search algorithm"
    },

    "minimum spanning tree": {
        "prefix": "!mst",
        "body": [
            "long long MST(vector<pair<int, pair<int, int>>> &connections, int n) {",
            "  sort(connections.begin(), connections.end());",
            "  vector<int> nodes(n);",
            "  long long sum = 0LL;",
            "  iota(nodes.begin(), nodes.end(), 0);",
            "  function<int(int)> Find = [&](int a) {",
            "    if (nodes[a] != a)",
            "      nodes[a] = Find(nodes[a]);",
            "    return nodes[a];",
            "  };",
            "  function<void(int, int, int)> Union = [&](int a, int b, int price) {",
            "    int fa = Find(a), fb = Find(b);",
            "    if (fa != fb) {",
            "      nodes[fa] = fb;",
            "      sum += price;",
            "    }",
            "  };",
            "  for (auto i : connections) {",
            "    Union(i.second.first, i.second.second, i.first);",
            "  }",
            "  return sum;",
            "}"
        ],
        "description": "Kruskal's minimum spanning tree algorithm"
    },

    "dijkstra": {
        "prefix": "!dijkstra",
        "body": [
            "void DIJ(int start) {",
            "  priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> Q;",
            "  Q.push({0, start});",
            "  while (!Q.empty()) {",
            "    int distance = Q.top().first, vertex_number = Q.top().second;",
            "    Q.pop();",
            "    if (visited[vertex_number]) continue;",
            "    visited[vertex_number] = true;",
            "    distances[vertex_number] = distance;",
            "    for (const auto vertex : graph[vertex_number]) {",
            "      if (!visited[vertex.first]) {",
            "        Q.push({vertex.second + distance, vertex.first});",
            "      }",
            "    }",
            "  }",
            "}"
        ],
        "description": "Dijkstra's algorithm"
    },

    "lca": {
        "prefix": "!lca",
        "body": [
            "array<array<int, MAX_SIZE>, 21> parent;",
            "template <size_t MAX_SIZE>",
            "struct LCA {",
            "    array<vector<int>, MAX_SIZE>& tree;",
            "    array<bool, MAX_SIZE> vis;",
            "    array<int, MAX_SIZE> pre, post;  // preorder, postorder",
            "",
            "    unsigned int size, pre_order = 0, post_order = 0;",
            "",
            "    LCA(unsigned int size, array<vector<int>, MAX_SIZE>& tree) : size(size), tree(tree) {",
            "        for (int i = 0; i <= size; i++) {",
            "            parent[0][i] = i;",
            "        }",
            "        pre[0] = 0;",
            "        post[0] = size + 1;",
            "        prepareLCA(1, 0);",
            "    }",
            "",
            "    void fillParents(int n) {",
            "        for (int i = 2; i < parent.size(); i++) {",
            "            parent[i][n] = parent[i - 1][parent[i - 1][n]];",
            "        }",
            "    }",
            "",
            "    void prepareLCA(int v, int v_parent) {",
            "        if (vis[v]) return;",
            "        vis[v] = true;",
            "        parent[1][v] = v_parent;",
            "        fillParents(v);",
            "        pre[v] = ++pre_order;",
            "        for (auto u : tree[v]) {",
            "            prepareLCA(u, v);",
            "        }",
            "        post[v] = ++post_order;",
            "    }",
            "",
            "    bool isParent(int a, int b) { return pre[a] <= pre[b] && post[a] >= post[b]; }",
            "",
            "    int operator()(int a, int b) {",
            "        if (isParent(a, b)) return a;",
            "        if (isParent(b, a)) return b;",
            "        for (int i = parent.size() - 1; i > 0; --i) {",
            "            if (!isParent(parent[i][a], b)) {",
            "                a = parent[i][a];",
            "            }",
            "        }",
            "        return parent[1][a];",
            "    }",
            "};"
        ],
        "description": "Lowest Common Ancestor algorithm"
    },

    "scc": {
        "prefix": "!scc",
        "body": [
            "struct SCC {",
            "    // index - pre order index, low_link - smallest index of any node on the stack to be reachable",
            "    vector<int> index, low_link;",
            "    vector<bool> onstack, visited;",
            "    stack<int> S;",
            "",
            "    vector<vector<int>>& graph;",
            "",
            "    // functions to execute while going through connected components and after",
            "    function<void(unsigned int)> comp, after;",
            "",
            "    SCC(vector<vector<int>>& graph, function<void(unsigned int)> component_callback,",
            "        function<void(unsigned int)> after)",
            "        : graph(graph), comp(component_callback), after(after) {",
            "        index.resize(graph.size());",
            "        low_link.resize(graph.size());",
            "        onstack.resize(graph.size());",
            "        visited.resize(graph.size());",
            "    }",
            "",
            "    unsigned int current_index = 0, current_element;",
            "    void DFS(unsigned int v) {",
            "        index[v] = current_index;",
            "        low_link[v] = current_index;",
            "        ++current_index;",
            "        S.push(v);",
            "        onstack[v] = true;",
            "        visited[v] = true;",
            "        for (auto u : graph[v]) {",
            "            if (!visited[u]) {",
            "                DFS(u);",
            "                low_link[v] = min(low_link[v], low_link[u]);",
            "            } else if (onstack[u]) {",
            "                low_link[v] = min(low_link[v], index[u]);",
            "            }",
            "        }",
            "        if (low_link[v] == index[v]) {",
            "            do {",
            "                current_element = S.top();",
            "                comp(current_element);",
            "                onstack[current_element] = false;",
            "                S.pop();",
            "",
            "            } while (current_element != v);",
            "            after(v);",
            "        }",
            "    }",
            "};"
        ],
        "description": "Strongly connected components - Trojan's implementation"
    },

    "centroid": {
        "prefix": "!centroid",
        "body": [
            "template <size_t root_node = 1>",
            "vector<int> centroid(const vector<vector<int>> &graph, int size_offset = 0) {",
            "  int tree_size = graph.size() + size_offset;",
            "  vector<int> centroids;",
            "  vector<int> subtree_size(graph.size());",
            "  function<void(int, int)> dfs = [&](int u, int parent) {",
            "    subtree_size[u] = 1;",
            "    bool is_centroid = true;",
            "    for (auto v : graph[u])",
            "      if (v != parent) {",
            "        dfs(v, u);",
            "        subtree_size[u] += subtree_size[v];",
            "        if (subtree_size[v] > tree_size / 2)",
            "          is_centroid = false;",
            "      }",
            "    if (tree_size - subtree_size[u] > tree_size / 2)",
            "      is_centroid = false;",
            "    if (is_centroid)",
            "      centroids.push_back(u);",
            "  };",
            "  dfs(root_node, -1);",
            "  return centroids;",
            "}"
        ],
        "description": "Function to get centroids of a tree"
    },

    "t_equal": {
        "prefix": "!t_equal",
        "body": [
            "bool t_equal(const vector<vector<int>> &tree1, const vector<vector<int>> &tree2,",
            "             int size_offset = 0) {",
            "  map<vector<int>, int> hashes;",
            "  unsigned int biggest_hash = 0;",
            "  auto tree1_centroids = centroid(tree1, size_offset);",
            "  auto tree2_centroids = centroid(tree2, size_offset);",
            "  if (tree1_centroids.size() != tree2_centroids.size())",
            "    return false;",
            "  function<void(vector<int> &)> hash_children = [&](vector<int> &children) {",
            "    sort(children.begin(), children.end());",
            "    if (hashes[children] == 0) {",
            "      hashes[children] = ++biggest_hash;",
            "    }",
            "  };",
            "  vector<int> children;",
            "  function<void(const vector<vector<int>> &, int, int)> hash_tree =",
            "      [&](const vector<vector<int>> &tree, int v, int parent) {",
            "        for (auto u : tree[v]) {",
            "          if (u == parent)",
            "            continue;",
            "          hash_tree(tree, u, v);",
            "          children.push_back(u);",
            "        }",
            "        hash_children(children);",
            "        children.clear();",
            "      };",
            "  hash_tree(tree1, tree1_centroids[0], -1);",
            "  hash_tree(tree2, tree2_centroids[0], -1);",
            "  for (auto u : tree1[tree1_centroids[0]]) {",
            "    children.push_back(u);",
            "  }",
            "  sort(children.begin(), children.end());",
            "  vector<int> children_tree2;",
            "  for (auto centroid : tree2_centroids) {",
            "    for (auto u : tree2[centroid]) {",
            "      children_tree2.push_back(u);",
            "    }",
            "    sort(children_tree2.begin(), children_tree2.end());",
            "    if (hashes[children] == hashes[children_tree2])",
            "      return true;",
            "  }",
            "  return false;",
            "}"
        ],
        "description": "Function checking if two trees are equal"
    },

    "interval set": {
        "prefix": "!IntervalSet",
        "body": [
            "template <class T = int>",
            "struct IntervalSet {",
            "    std::set<pair<T, T>> S;",
            "",
            "    IntervalSet() {",
            "        S.insert({",
            "            std::numeric_limits<T>::max(),",
            "            std::numeric_limits<T>::max(),",
            "        });",
            "        S.insert({",
            "            std::numeric_limits<T>::min(),",
            "            std::numeric_limits<T>::min(),",
            "        });",
            "    }",
            "",
            "    void insert(int a, int b) {",
            "        auto it = std::prev(S.upper_bound({b + 1, std::numeric_limits<T>::max()}));",
            "        while (it->second + 1 >= a) {",
            "            a = std::min(it->first, a);",
            "            b = std::max(it->second, b);",
            "            it = std::prev(it);",
            "            S.erase(std::next(it));",
            "        }",
            "        S.insert({a, b});",
            "    }",
            "",
            "    void erase(int a, int b) {",
            "        auto it = std::prev(S.upper_bound({b, std::numeric_limits<T>::max()}));",
            "        while (it->second >= a) {",
            "            if (b + 1 <= it->second) S.insert({b + 1, it->second});",
            "            if (it->first <= a - 1) S.insert({it->first, a - 1});",
            "            it = std::prev(it);",
            "            S.erase(next(it));",
            "        }",
            "    }",
            "",
            "    void forInRange(int a, int b, std::function<void(T, T)> lmb) {",
            "        auto it = std::prev(S.upper_bound({b, std::numeric_limits<T>::max()}));",
            "        while (it->second >= a) {",
            "            lmb(std::max(a, it->first), std::min(b, it->second));",
            "            it = std::prev(it);",
            "        }",
            "    }",
            "",
            "    void forNotInRange(int a, int b, std::function<void(T, T)> lmb) {",
            "        auto it = S.upper_bound({b, std::numeric_limits<T>::max()});",
            "        while (it->second >= a) {",
            "            if (std::max(a, std::prev(it)->second + 1) <= std::min(b, it->first - 1)) {",
            "                lmb(std::max(a, std::prev(it)->second + 1), std::min(b, it->first - 1));",
            "            }",
            "            it = std::prev(it);",
            "        }",
            "    }",
            "};"
        ],
        "description": "Structure for saving intervals and erasing them."
    },

    "interval tree - point, range": {
        "prefix": "!IntervalTree",
        "body": [
            "template <class NodeType = int, class ReducerType = long long,",
            "      class FuncType = std::function<NodeType(NodeType &, NodeType &)>,",
            "      class ReduceType = std::function<ReducerType(NodeType &, ReducerType &)>>",
            "struct IntervalTree {",
            "  std::vector<NodeType> nodes;",
            "  long long BASE;",
            "  unsigned int next_pos = 0;",
            "  ReducerType starting_value;",
            "  FuncType set, merge;",
            "  ReduceType reduce;",
            "",
            "  unsigned int two_ceil(unsigned int a) {",
            "    --a;",
            "    a |= a >> 1;",
            "    a |= a >> 2;",
            "    a |= a >> 4;",
            "    a |= a >> 8;",
            "    a |= a >> 16;",
            "    ++a;",
            "    return a;",
            "  }",
            "",
            "  IntervalTree(",
            "    unsigned int size, NodeType default_value = 0, ReducerType starting_value = 0,",
            "    FuncType merge = [](NodeType &first_value,",
            "              NodeType &second_value) { return first_value + second_value; },",
            "    FuncType set = [](NodeType &new_value, NodeType &current_value) { return new_value; },",
            "    ReduceType reduce = [](NodeType &new_value,",
            "                 ReducerType &reducer) { return new_value + reducer; })",
            "    : starting_value(starting_value),",
            "      BASE(two_ceil(size)),",
            "      merge(merge),",
            "      set(set),",
            "      reduce(reduce) {",
            "    nodes.resize(2 * BASE + 2, default_value);",
            "  }",
            "",
            "  void insert(NodeType value) { nodes[BASE + next_pos++] = value; }",
            "",
            "  ReducerType query(int start, int end) {",
            "    ReducerType result = starting_value;",
            "    start += BASE - 2;",
            "    end += BASE;",
            "    for (; (start >> 1) != (end >> 1); (start >>= 1), (end >>= 1)) {",
            "      if ((start & 1) == 0) {",
            "        result = reduce(nodes[start + 1], result);",
            "      }",
            "      if ((end & 1) == 1) {",
            "        result = reduce(nodes[end - 1], result);",
            "      }",
            "    }",
            "    return result;",
            "  }",
            "",
            "  void update(int position, NodeType value) {",
            "    position = position + BASE - 1;",
            "    nodes[position] = set(value, nodes[position]);",
            "    for (int i = (position >> 1); 0 < i; (i >>= 1)) {",
            "      nodes[i] = merge(nodes[i * 2], nodes[i * 2 + 1]);",
            "    }",
            "  }",
            "",
            "  void refresh_values() {",
            "    for (int i = BASE / 2; 0 < i; i /= 2) {",
            "      for (int j = i; j < i * 2; j++) {",
            "        nodes[j] = merge(nodes[j * 2], nodes[j * 2 + 1]);",
            "      }",
            "    }",
            "  }",
            "};"
        ],
        "description": "interval tree - point, range"
    },

    "interval tree - range, point": {
        "prefix": "!RevIntervalTree",
        "body": [
            "template <class NodeType = int, class ReducerType = long long,",
            "      class FuncType = std::function<NodeType(NodeType &, NodeType &)>,",
            "      class ReduceType = std::function<ReducerType(NodeType &, ReducerType &)>>",
            "struct RevIntervalTree {",
            "  std::vector<NodeType> nodes;",
            "  long long BASE;",
            "  unsigned int next_pos = 0;",
            "  ReducerType starting_value;",
            "  FuncType set;",
            "  ReduceType reduce;",
            "",
            "  unsigned int two_ceil(unsigned int a) {",
            "    --a;",
            "    a |= a >> 1;",
            "    a |= a >> 2;",
            "    a |= a >> 4;",
            "    a |= a >> 8;",
            "    a |= a >> 16;",
            "    ++a;",
            "    return a;",
            "  }",
            "",
            "  RevIntervalTree(",
            "    unsigned int size, NodeType default_value = 0, ReducerType starting_value = 0,",
            "    FuncType set = [](NodeType &new_value, NodeType &current_value) { return new_value; },",
            "    ReduceType reduce = [](NodeType &new_value,",
            "                 ReducerType &reducer) { return new_value + reducer; })",
            "    : starting_value(starting_value), BASE(two_ceil(size)), set(set), reduce(reduce) {",
            "    nodes.resize(2 * BASE + 2, default_value);",
            "  }",
            "",
            "  void insert(NodeType value) { nodes[BASE + next_pos++] = value; }",
            "",
            "  void update(int start, int end, NodeType value) {",
            "    start += BASE - 2;",
            "    end += BASE;",
            "    for (; (start >> 1) != (end >> 1); (start >>= 1), (end >>= 1)) {",
            "      if ((start & 1) == 0) {",
            "        nodes[start + 1] = set(value, nodes[start + 1]);",
            "      }",
            "      if ((end & 1) == 1) {",
            "        nodes[end - 1] = set(value, nodes[end - 1]);",
            "      }",
            "    }",
            "  }",
            "",
            "  ReducerType query(int position) {",
            "    ReducerType result = starting_value;",
            "    position = position + BASE - 1;",
            "    result = reduce(nodes[position], result);",
            "    for (int i = (position >> 1); 0 < i; (i >>= 1)) {",
            "      result = reduce(nodes[i], result);",
            "    }",
            "    return result;",
            "  }",
            "};"
        ],
        "description": "interval tree - range, point"
    }
}
